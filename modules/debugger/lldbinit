settings set prompt "(lldb) "

# This flavor places the destination as the first argument after the opcode.
# For example: `opcode destination source`
settings set target.x86-disassembly-flavor intel

# Do not skip function prologues
# Function prologues are the beginning section of a
# function that prepares the stack and registers
settings set target.skip-prologue false

# Remove LLDB's "b" GDB command implementation
# to force me to use LLDB in LLDB's way.
command unalias b
command alias b breakpoint

# Allow stepping into functions that do not have debugging symbols
settings set target.process.thread.step-in-avoid-nodebug false

# Load .lldbinit files from the current working directory
settings set target.load-cwd-lldbinit true

# For C++, build a "clang module" for the STD libraries, from
# which LLDB can build needed specializations on demand
# See https://stackoverflow.com/a/70501473/1641422
settings set target.import-std-module true

# Convenient shorthand to "image lookup" regex search
command regex rlook 's/(.+)/image lookup -rn %1/'

# Print value in ObjC context in hexadecimal, because
# registers are not available in the Swift context
# Usage: cpx <value>
command alias cpx expression --format hex --language objc --

# Print a value in binary form
# Usage: binary <value>
command alias binary expression --format bin --language c --

# Script Bridging: personal scripts
command alias reload command script import ~/.lldb/jviotti.py
# Use this to also reload changes from the scripts
reload
command script add --overwrite --function jviotti.test test
command script add --overwrite --function jviotti.gtest gtest
